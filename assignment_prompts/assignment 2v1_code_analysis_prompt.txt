ASSIGNMENT-SPECIFIC INSTRUCTIONS FOR ASSIGNMENT 2V1:

HOW TO VERIFY COMPLETION - Check student code for these SPECIFIC elements:

1. DATA IMPORT (Required):
   ✓ Must have: read_csv("messy_sales_data.csv")
   ✓ Must create: messy_sales variable
   ✓ Must show: print() or head() output
   VERIFICATION: Search for "messy_sales" and "read_csv" in code

2. INITIAL ASSESSMENT (Required):
   ✓ Must have: head(messy_sales) or similar
   ✓ Must have: str(messy_sales) or glimpse()
   ✓ Must have: summary(messy_sales)
   ✓ Must show: actual output from these commands
   VERIFICATION: Check for function calls AND visible output

3. MISSING VALUE IDENTIFICATION (Required):
   ✓ Must calculate: sum(is.na(messy_sales))
   ✓ Must calculate: colSums(is.na(messy_sales))
   ✓ Must show: numeric results (not just code)
   VERIFICATION: Look for "is.na" and numeric output

4. MISSING VALUE TREATMENT (Required - ONE option):
   Option A: ✓ Must create: sales_removed_na with complete.cases()
   Option B: ✓ Must create: sales_imputed_na with mean/median imputation
   SCORING: If EITHER option completed = FULL CREDIT
   VERIFICATION: Search for "sales_removed_na" OR "sales_imputed_na"

5. COMPARE STRATEGIES (Required):
   ✓ Must compare: nrow() of original vs cleaned datasets
   ✓ Must show: actual row counts in output
   VERIFICATION: Look for nrow() comparisons with output

6. OUTLIER DETECTION IQR (Required):
   ✓ Must calculate: Q1, Q3, IQR for numeric columns
   ✓ Must calculate: lower_bound and upper_bound
   ✓ Must identify: which values are outliers
   VERIFICATION: Search for "IQR", "Q1", "Q3", "quantile"

7. OUTLIER BOXPLOT (Required):
   ✓ Must create: boxplot or ggplot boxplot
   ✓ Must show: visual output (not just code)
   VERIFICATION: Look for "boxplot" or "geom_boxplot" with plot output

8. OUTLIER TREATMENT (Required - ONE option):
   Option A: ✓ Must create: sales_removed_outliers by filtering
   Option B: ✓ Must create: sales_capped_outliers with min/max capping
   SCORING: If EITHER option completed = FULL CREDIT
   VERIFICATION: Search for "sales_removed_outliers" OR "sales_capped_outliers"

9. FINAL DATASET SELECTION (Required):
   ✓ Must create: final_sales variable
   ✓ Must assign: one of the cleaned datasets to it
   VERIFICATION: Search for "final_sales <-" or "final_sales ="

10. COMPARISON SUMMARY (Required):
    ✓ Must compare: dimensions of all datasets (original, removed, imputed/capped, final)
    ✓ Must show: actual numbers in output
    VERIFICATION: Look for dim() or nrow()/ncol() comparisons

11. REFLECTION Q1 (Required):
    ✓ Must answer: "When would you prefer removing rows vs imputation?"
    ✓ Must provide: substantive answer (not just "it depends")
    VERIFICATION: Look in markdown cells for discussion of removal vs imputation

12. REFLECTION Q2 (Required):
    ✓ Must answer: "What do outliers represent? Should they be removed?"
    ✓ Must provide: substantive answer with reasoning
    VERIFICATION: Look in markdown cells for discussion of outliers

CRITICAL SCORING RULES:
- Each section = 1 point (12 total)
- For optional sections (4 and 8): completing ONE option = full point
- Missing code = 0 points for that section
- Code without output = 0 points (notebook must be executed)
- Template code unchanged = 0 points
- FINAL SCORE: (completed sections / 12) × 100

COMMON MISTAKES TO CATCH:
❌ Student only has template comments, no actual code
❌ Student has code but no output (didn't run notebook)
❌ Student copied code but didn't change variable names
❌ Student skipped reflection questions
❌ Student did neither Option A nor Option B

TEMPLATE COMPARISON:
- Compare student code length to template code length
- If student code < 110% of template length = likely minimal work
- Check for specific variable names that indicate actual work
- Don't just count lines - verify actual implementation

INCOMPLETE SECTION COUNTING:
- Count each missing required section as incomplete
- For optional sections: only count as incomplete if NEITHER option done
- Use this count to calculate: incomplete_sections_count
