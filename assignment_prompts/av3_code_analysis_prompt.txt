ASSIGNMENT-SPECIFIC INSTRUCTIONS FOR ASSIGNMENT 3 (av3):
Data Transformation with dplyr - Part 1

HOW TO VERIFY COMPLETION - Check student code for these SPECIFIC elements:

1. DATA IMPORT (Required):
   ‚úì Must have: read_csv("retail_transactions.csv") or read.csv()
   ‚úì Must create: transactions variable
   ‚úì Must show: "Data imported successfully!" message
   VERIFICATION: Search for "transactions <-" and "read_csv"

2. INITIAL EXPLORATION (Required):
   ‚úì Must have: head(transactions) showing first 10 rows
   ‚úì Must have: str(transactions) showing structure
   ‚úì Must have: names(transactions) showing column names
   ‚úì Must show: actual output from these commands
   VERIFICATION: Look for function calls AND visible output

3. BASIC SELECTION (Required):
   ‚úì Must create: basic_info with select(TransactionID, CustomerID, ProductName, TotalAmount)
   ‚úì Must use: %>% pipe operator
   ‚úì Must show: head() output of result
   VERIFICATION: Search for "basic_info <-" and "select("

4. RANGE SELECTION (Required):
   ‚úì Must create: customer_details using select(CustomerID:CustomerCity)
   ‚úì Must use: colon operator for range
   ‚úì Must show: output
   VERIFICATION: Look for ":" in select statement

5. PATTERN SELECTION (Required):
   ‚úì Must create: date_columns using starts_with() or contains()
   ‚úì Must create: amount_columns using contains("Amount")
   ‚úì Must show: column names output
   VERIFICATION: Search for "starts_with" or "contains"

6. EXCLUSION SELECTION (Required):
   ‚úì Must create: no_ids using select(-TransactionID, -CustomerID)
   ‚úì Must use: minus sign for exclusion
   ‚úì Must show: remaining column count
   VERIFICATION: Look for "-" in select statement

7. SINGLE CONDITION FILTER (Required):
   ‚úì Must create: high_value_transactions with filter(TotalAmount > 100)
   ‚úì Must create: electronics_transactions with filter(ProductCategory == "Electronics")
   ‚úì Must show: row counts
   VERIFICATION: Search for "filter(" and comparison operators

8. MULTIPLE AND CONDITIONS (Required):
   ‚úì Must create: ny_bulk_purchases with filter(TotalAmount > 50 & Quantity > 1 & CustomerCity == "New York")
   ‚úì Must use: & operator for AND
   ‚úì Must show: filtered results
   VERIFICATION: Look for "&" in filter statement

9. MULTIPLE OR CONDITIONS (Required):
   ‚úì Must create: entertainment_transactions with %in% c("Books", "Music", "Movies")
   ‚úì Must use: %in% or | operator
   ‚úì Must show: row count
   VERIFICATION: Search for "%in%" or "|"

10. DATE FILTERING (Required):
    ‚úì Must filter: march_transactions for March 2024
    ‚úì May use: month() and year() functions or date comparison
    ‚úì Must show: filtered count
    VERIFICATION: Look for date-related functions

11. ADVANCED CHALLENGE (Required):
    ‚úì Must find: customers in both Electronics AND Clothing
    ‚úì Must use: intersect() or similar logic
    ‚úì Must show: customer count
    VERIFICATION: Look for "intersect" or complex filtering logic

12. SINGLE COLUMN SORT (Required):
    ‚úì Must create: transactions_by_amount_asc with arrange(TotalAmount)
    ‚úì Must create: transactions_by_amount_desc with arrange(desc(TotalAmount))
    ‚úì Must show: top 5 of each
    VERIFICATION: Search for "arrange(" and "desc("

13. MULTIPLE COLUMN SORT (Required):
    ‚úì Must create: transactions_by_city_amount with arrange(CustomerCity, desc(TotalAmount))
    ‚úì Must sort by: city first, then amount
    ‚úì Must show: sorted output
    VERIFICATION: Look for multiple arguments in arrange()

14. DATE-BASED SORT (Required):
    ‚úì Must create: transactions_chronological with arrange(TransactionDate)
    ‚úì Must show: earliest transactions
    VERIFICATION: Search for "arrange" with date column

15. SIMPLE CHAIN (Required):
    ‚úì Must create: premium_purchases with filter + select + arrange
    ‚úì Must use: %>% to chain operations
    ‚úì Must show: top 10 results
    VERIFICATION: Count number of %>% operators (should be 3+)

16. COMPLEX CHAIN (Required):
    ‚úì Must create: recent_tech_purchases with multiple operations
    ‚úì Must filter: Electronics or Computers
    ‚úì Must use: head(20) to limit results
    VERIFICATION: Look for chained operations with %>%

17. BUSINESS INTELLIGENCE CHAIN (Required):
    ‚úì Must create: high_value_customers with TotalAmount > 200
    ‚úì Must chain: filter + select + arrange
    ‚úì Must show: top 15 results
    VERIFICATION: Check for business-relevant filtering

18. TRANSACTION COUNTS (Required):
    ‚úì Must display: nrow() counts for all filtered datasets
    ‚úì Must show: at least 8 different counts
    VERIFICATION: Look for multiple nrow() calls with output

19. TOP CUSTOMERS (Required):
    ‚úì Must analyze: customer_frequency in high_value_customers
    ‚úì May use: count(), group_by(), or table()
    ‚úì Must show: most frequent customer
    VERIFICATION: Look for aggregation functions AND output
    IMPORTANT: If output shows customer counts, section is COMPLETE

20. PRODUCT ANALYSIS (Required):
    ‚úì Must find: top 5 most expensive entertainment transactions
    ‚úì Must use: arrange(desc()) and head(5)
    ‚úì Must show: results
    VERIFICATION: Check for sorting and limiting AND output
    IMPORTANT: If output shows top 5 transactions, section is COMPLETE

21. GEOGRAPHIC ANALYSIS (Required):
    ‚úì Must find: city with highest single transaction
    ‚úì Must use: arrange and head(1) or max()
    ‚úì Must show: city name and amount
    VERIFICATION: Look for geographic filtering/sorting AND output
    IMPORTANT: If output shows city and amount, section is COMPLETE
    EXAMPLE: "Customer 18, Chicago, iPhone 14, $1487.43" = COMPLETE

REFLECTION QUESTIONS (4 required):

22. PIPE OPERATOR BENEFITS (Required):
    ‚úì Must discuss: readability improvements
    ‚úì Must provide: specific example from homework
    ‚úì Minimum: 50 words
    VERIFICATION: Look in markdown cells for %>% discussion

23. FILTERING STRATEGY (Required):
    ‚úì Must discuss: trade-offs of specific vs general filtering
    ‚úì Must mention: impact on insights
    ‚úì Minimum: 50 words
    VERIFICATION: Look for discussion of filtering approaches

24. SORTING IMPORTANCE (Required):
    ‚úì Must provide: 3 business scenarios
    ‚úì Must explain: why sorting is crucial
    ‚úì Minimum: 75 words (3 scenarios)
    VERIFICATION: Count number of scenarios listed

25. REAL-WORLD APPLICATION (Required):
    ‚úì Must describe: business scenario using select + filter + arrange
    ‚úì Must explain: insights to gain
    ‚úì Minimum: 75 words
    VERIFICATION: Look for combined operations discussion

CRITICAL SCORING RULES:
- Each code section (1-21) = 1 point (21 total)
- Each reflection question (22-25) = 1 point (4 total)
- Total: 25 sections
- FINAL SCORE: (completed sections / 25) √ó 100

üö® CRITICAL VERIFICATION RULES - PREVENT HALLUCINATION üö®

BEFORE marking ANY section as incomplete, YOU MUST:
1. Look for OUTPUT text below the code
2. If OUTPUT exists, the section is COMPLETE - DO NOT mark as incomplete
3. If you see a tibble, data.frame, or printed result = COMPLETE
4. If you see "# A tibble: X √ó Y" = COMPLETE
5. If you see printed numbers or text after code = COMPLETE

EXAMPLES OF COMPLETE SECTIONS:
‚úÖ Code: customer_frequency <- data %>% slice(1)
   Output: "# A tibble: 1 √ó 4" with data = COMPLETE

‚úÖ Code: top_entertainment <- data %>% head(5)
   Output: Shows 5 rows of data = COMPLETE

‚úÖ Code: highest_transaction <- data %>% slice(1)
   Output: Shows 1 row with city and amount = COMPLETE

ONLY mark incomplete if:
‚ùå NO code at all
‚ùå Only template comments like "# Your code here:"
‚ùå Code exists but NO output visible

IF YOU SEE OUTPUT, DO NOT SAY "you did not complete"!

PIPE OPERATOR REQUIREMENT:
- Student MUST use %>% in at least 15 sections
- Not using pipes = 20% deduction
- Check for: transactions %>% filter() %>% select() %>% arrange()

COMMON MISTAKES TO CATCH:
‚ùå Student only has template comments, no actual code
‚ùå Student has code but no output (didn't run notebook)
‚ùå Student uses = instead of == in filter()
‚ùå Student forgets desc() for descending sort
‚ùå Student doesn't load tidyverse library
‚ùå Reflection answers are too short (<50 words)
‚ùå Reflection answers are generic ("it depends", "it's useful")

TEMPLATE COMPARISON:
- Compare student code length to template code length
- If student code < 120% of template length = likely minimal work
- Check for specific function names: filter, select, arrange, %>%
- Don't just count lines - verify actual implementation

INCOMPLETE SECTION COUNTING:
- Count each missing required section as incomplete
- Use this count to calculate: incomplete_sections_count
- Sections with only template code = incomplete
- Sections without output = incomplete
